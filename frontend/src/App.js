import "./App.css";
import React, { useEffect, useState } from "react";
import Button from "react-bootstrap/Button";
import Form from "react-bootstrap/Form";

import Game from "./components/Game/Game";
import IModal from "./components/IModal";
import Leaderboard from "./components/Leaderboard/Leaderboard";

import axios from "axios";



let TEST_PUZZLES;

const serverPort = 5001;
const serverURL = "http://localhost:" + serverPort;


const emptyGame = [
  [-1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1, -1, -1, -1, -1],
  [-1, -1, -1, -1, -1, -1, -1, -1, -1],
];


function App() {
  /* App state variables */

  // Initial state represents fixed squares which cannot be modified
  const [InitialState, setInitialState] = useState(emptyGame);  
  // Game state represents current game
  const [GameState, setGameState] = useState(emptyGame);
  const [Time, setTime] = useState(0);
  const [TimerOn, setTimerOn] = useState(false);
  const [BottomText, setBottomText] = useState("");
  const [GameRunning, setGameRunning] = useState(false);

  const [Scores, setScores] = useState([]);
  const [Games, setGames] = useState([]);
  const [Times, setTimes] = useState([]);

  const [usrname, setUsrname] = useState("");
  const [pass, setPass] = useState("");

  const [isLoggedIn, setisLoggedIn] = useState(false);
  const [myDetails, setmyDetails] = useState({
    username: "",
    Score: 0,
    Games: 0,
  });


  /* useEffect hooks */
  // Timer increment logic
  useEffect(() => {
    let interval;
    if (TimerOn) {
      interval = setInterval(() => setTime(Time + 1), 1000);
    }
    return () => clearInterval(interval);
  }, [TimerOn, Time]);

  // Update leaderboard at whenever page is loaded
  useEffect(() => {
    updateLeaderboard();
  }, []);


  /* Helper and handler Functions */

  // Resets timer to 0
  function resetTimer() {
    setTime(0);
    setTimerOn(false);
  }

  // Sets the board to empty and resets timer
  function handleNewGame() {
    setGameState(emptyGame);
    setInitialState(emptyGame);
    resetTimer();
    setGameRunning(false);
    setBottomText("");
  }


  // Loads game from given game string onto board
  // Game string format: a txt file containing 81 comma separated integers between 1 to 9. Enter -1 for empty space
  function loadGame(gameStr) {
    let gameArr = gameStr.split(",");
    console.log(gameArr);
    if (gameArr.length !== 81) return false;

    const game = [];

    // Iterate over the input array and split it into chunks of size 9
    for (let i = 0; i < gameArr.length; i += 9) {
      const chunk = gameArr.slice(i, i + 9);

      // Check that each entry in the chunk is a valid integer
      for (let j = 0; j < chunk.length; j++) {
        const num = parseInt(chunk[j]);

        if (
          num !== -1 &&
          (isNaN(num) || num < 1 || num > 9 || !Number.isInteger(num))
        ) {
          return false;
        }

        chunk[j] = num;
      }

      game.push(chunk);
    }

    setGameState(JSON.parse(JSON.stringify(game)));
    setInitialState(JSON.parse(JSON.stringify(game)));

    return true;
  }

  // Gets file from input and tries to load it
  function handleFileChange(e) {
    let file;
    if (e.target.files) {
      file = e.target.files[0];
    }

    const Reader = new FileReader();
    Reader.readAsText(file);
    Reader.onload = (e) => {
      let loaded = loadGame(Reader.result);
      if (loaded) {
        setBottomText("Game loaded!");
        resetTimer();
        setGameRunning(false);
      } else {
        setBottomText("Invalid Input");
      }
    };
    e.target.value = "";
  }

  // Sets the board to empty and resets timer
  function handleGenerate() {
    let r = Math.floor(Math.random() * 95);
    loadGame(TEST_PUZZLES[r]);
    setBottomText("Game Generated!");
    resetTimer();
    setGameRunning(false);
  }

  // Helper function to convert 2D array into single string
  function convertGridToString(grid) {
    // Flatten the grid array into a single array
    const flattened = grid.flat();

    // Convert each value in the flattened array to a string
    const strings = flattened.map((value) => value.toString());

    // Join the string values with commas
    return strings.join(",");
  }

  // Updates leaderboard by fetching using api
  function updateLeaderboard() {
    fetch(serverURL + "/leaderboards?puzzle=" + convertGridToString(GameState))
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        setScores(data.Scores);
        setGames(data.Games);
        setTimes(data.Time);
      });
  }

  // Registers users to database
  function handleRegister() {
    axios
      .post(serverURL + "/register", { username: usrname, password: pass })
      .then((response) => {
        if (response.data.message === "Success") {
          alert("Successfully registered!");
        }
      })
      .catch((error) => {
        console.error(error); // Handle error
      });
  }

  // Logs users in
  function handleLogin() {
    // Make API call to login user
    axios
      .post(serverURL + "/login", { username: usrname, password: pass })
      .then((response) => {
        const token = response.data.token; // Get JWT token from response
        localStorage.setItem("token", token); // Save token in localStorage
        if (response.data.message === "Success") {
          setisLoggedIn(true);
          alert("Successfullt logged in!");
          getDetails();
        }
      })
      .catch((error) => {
        console.error(error); // Handle error
      });
  }

  // Gets logged in user's details to display
  function getDetails() {
    axios
      .get(serverURL + "/getDetails", {
        headers: {
          "x-access-token": localStorage.getItem("token"),
        },
      })
      .then(function (response) {
        setmyDetails(response.data);
      })
      .catch(function (error) {
        console.log(error);
      });
  }

  // Logs user out
  function handleLogout() {
    setisLoggedIn(false);
    localStorage.removeItem("token");
  }

  // Submits solution to server if user is logged in
  function submitToserver(data) {
    if (isLoggedIn) {
      const info = data;
      const config = {
        headers: { "x-access-token": localStorage.getItem("token") },
      };
      axios
        .post(serverURL + "/solution", info, config)
        .then((response) => {
          if (response.data.message === "Success") {
            updateLeaderboard();
            getDetails();
          }
        })
        .catch((error) => {
          console.error(error); // Handle error
        });
    }
  }

  // JSX
  return (
    <div className="App">
      <IModal />

      <header className="App-header">

        {/* Left Buttons */}
        <div className="MainButtonContainer">
          <button className="mybutton" onClick={handleNewGame}>
            New Game
          </button>
          <label className="custom-file-upload">
            <input type="file" onChange={handleFileChange} />
            Load Game
          </label>
          <button className="mybutton" onClick={handleGenerate}>
            Generate Game
          </button>
          <button
            className="mybutton"
            type="button"
            data-bs-toggle="modal"
            data-bs-target="#InstructionsModal"
          >
            Instructions
          </button>
        </div>

        {/* Middle game board and buttons */}
        <div className="GameSection">
          <Game
            GameState={GameState}
            setGameState={setGameState}
            InitialState={InitialState}
            setInitialState={setInitialState}
            Time={Time}
            setTime={setTime}
            TimerOn={TimerOn}
            setTimerOn={setTimerOn}
            BottomText={BottomText}
            setBottomText={setBottomText}
            GameRunning={GameRunning}
            setGameRunning={setGameRunning}
            submitToserver={submitToserver}
            isLoggedIn={isLoggedIn}
            updateLeaderboard={updateLeaderboard}
          />
        </div>

        {/* Leaderboard and login/register */}
        <div className="RightSection">
          <Leaderboard
            Scores={Scores}
            setScores={setScores}
            Games={Games}
            setGames={setGames}
            Times={Times}
            setTimes={setTimes}
          />

          <div className="FormContainer" hidden={isLoggedIn}>
            <Form>
              <Form.Group className="mb-3" controlId="formBasicEmail">
                <div id="authTitle">Login/Register</div>
                <Form.Control
                  type="username"
                  placeholder="Enter username"
                  value={usrname}
                  onChange={(event) => {
                    setUsrname(event.target.value);
                  }}
                />
              </Form.Group>

              <Form.Group className="mb-3" controlId="formBasicPassword">
                <Form.Control
                  type="password"
                  placeholder="Password"
                  value={pass}
                  onChange={(event) => {
                    setPass(event.target.value);
                  }}
                />
              </Form.Group>
              <Button
                variant="primary"
                type="button"
                className="mybutton"
                id="registerbutton"
                onClick={handleRegister}
              >
                Register
              </Button>
              <Button
                variant="primary"
                type="button"
                onClick={handleLogin}
                className="mybutton"
                id="loginbutton"
              >
                Login
              </Button>
            </Form>
          </div>

          <div id="loggedinContainer" hidden={!isLoggedIn}>
            <ul>
              <li>Username: {myDetails.username}</li>
              <li>Score: {myDetails.Score}</li>
              <li>Games played: {myDetails.Games}</li>
            </ul>
            <button onClick={handleLogout} className="mybutton">
              Log out
            </button>
          </div>
        </div>
      </header>
    </div>
  );
}

export default App;


TEST_PUZZLES = [
  "4,-1,-1,-1,-1,-1,8,-1,5,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,8,-1,4,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,6,-1,3,-1,7,-1,5,-1,-1,2,-1,-1,-1,-1,-1,1,-1,4,-1,-1,-1,-1,-1,-1",
  "5,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,8,-1,-1,6,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,2,-1,-1,-1,8,7,-1,-1,-1,-1,-1",
  "6,-1,-1,-1,-1,-1,8,-1,3,-1,4,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,4,-1,7,-1,3,-1,-1,2,-1,-1,-1,-1,-1,1,-1,6,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,8,-1,6,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1",
  "4,8,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,1,-1,2,-1,-1,-1,-1,-1,-1,-1,7,-1,5,-1,-1,-1,-1,6,-1,-1,-1,-1,2,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,7,6,-1,-1,-1,3,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1",
  "-1,-1,-1,-1,1,4,-1,-1,-1,-1,3,-1,-1,-1,-1,2,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,3,-1,6,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,2,-1,-1,-1,-1,-1,1,-1,4,-1,-1,-1,-1,5,-1,6,-1,-1,-1,-1,-1,7,-1,8,-1,-1,-1",
  "-1,-1,-1,-1,-1,-1,5,2,-1,-1,8,-1,4,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,9,-1,-1,-1,5,-1,1,-1,-1,-1,6,-1,-1,2,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,6,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,4,-1,-1,-1,-1,-1,-1,-1,3,-1",
  "6,-1,2,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,-1,-1,-1,8,-1,-1,-1,-1,1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,5,-1,-1,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,1,-1,-1,-1,6,-1,-1,-1,-1,-1",
  "-1,5,2,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,2,-1,-1,-1,3,-1,-1,-1,-1,-1,6,-1,-1,-1,9,-1,5,-1,-1,-1,-1,-1,1,-1,6,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,9,7,-1,-1,-1,-1,-1,-1,-1,-1",
  "6,-1,2,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,-1,-1,-1,8,-1,-1,-1,-1,1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,5,-1,-1,2,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,1,-1,-1,-1,6,-1,-1,-1,-1,-1",
  "-1,9,2,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,7,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,5,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,5,-1,2,-1,-1,-1,4,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1",
  "6,-1,-1,3,-1,2,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,1,5,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1",
  "-1,6,-1,5,-1,1,-1,9,-1,1,-1,-1,-1,9,-1,-1,5,3,9,-1,-1,-1,-1,7,-1,-1,-1,-1,4,-1,8,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,5,-1,8,-1,8,1,7,-1,5,-1,3,-1,-1,-1,-1,-1,5,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,6,-1,-1,8,-1,-1,-1",
  "-1,-1,5,-1,-1,-1,9,8,7,-1,4,-1,-1,5,-1,-1,-1,1,-1,-1,7,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,4,8,-1,-1,-1,-1,9,-1,1,-1,-1,-1,-1,-1,6,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,6,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,9,-1,7,-1,-1,-1,-1,-1,-1,-1,5,-1,-1",
  "3,-1,6,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,4,-1,5,-1,-1,-1,7,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,8,-1,3,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1",
  "1,-1,-1,-1,-1,-1,3,-1,8,-1,7,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,3,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,5,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,6,-1,-1,-1,7,-1,-1,-1,-1,-1,8,-1,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1",
  "6,-1,-1,3,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,1,5,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1",
  "-1,-1,-1,-1,3,-1,-1,9,-1,-1,-1,-1,2,-1,-1,-1,-1,1,-1,5,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,2,-1,8,-1,4,-1,6,-1,8,-1,5,-1,-1,-1,2,-1,-1,7,5,-1,-1,-1,-1,-1,-1,4,-1,1,-1,-1,6,-1,-1,3,-1,-1,-1,-1,-1,4,-1,6,-1",
  "4,5,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,8,-1,1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,9,-1,2,-1,-1,7,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,2,-1,-1,-1,6,-1,-1,8,-1,-1",
  "-1,2,3,7,-1,-1,-1,-1,6,8,-1,-1,-1,6,-1,5,9,-1,9,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,4,-1,9,7,-1,3,-1,7,-1,9,6,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,4,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1",
  "-1,-1,8,4,-1,-1,-1,3,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,1,5,7,4,7,9,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,5,1,4,-1,-1,-1,-1,-1,2,-1,-1,-1,9,-1,6,-1,-1,-1,2,-1,5,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,9,-1,-1,5,6",
  "-1,9,8,-1,1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,2,-1,5,-1,-1,8,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,8,-1,9,3,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1",
  "-1,-1,2,4,7,-1,-1,5,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,4,-1,-1,-1,-1,-1,2,-1,-1,-1,9,5,2,8,-1,9,-1,4,-1,-1,-1,-1,9,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,3,-1,-1,-1,-1,7,5,-1,-1,6,8,5,-1,-1,2,-1,-1,-1",
  "4,-1,-1,-1,-1,-1,8,-1,5,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,5,-1,4,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,6,-1,3,-1,7,-1,5,-1,-1,2,-1,-1,-1,-1,-1,1,-1,9,-1,-1,-1,-1,-1,-1",
  "-1,2,-1,3,-1,-1,-1,-1,-1,-1,6,3,-1,-1,-1,-1,-1,5,8,-1,-1,-1,-1,-1,-1,-1,1,5,-1,-1,-1,-1,9,-1,3,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,8,-1,8,7,9,-1,-1,2,6,-1,-1,-1,-1,-1,-1,6,-1,7,-1,-1,-1,6,-1,-1,7,-1,-1,4",
  "1,-1,-1,-1,-1,-1,7,-1,9,-1,4,-1,-1,-1,7,2,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,1,-1,-1,6,-1,3,-1,-1,-1,-1,-1,-1,-1,5,-1,6,-1,-1,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,5,3,-1,-1,-1,7,-1,7,-1,2,-1,-1,-1,-1,4,6",
  "4,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,8,-1,2,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,8,7,3,4,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,4,-1,-1,-1,8,2,-1,-1,-1,-1,-1,-1",
  "-1,-1,-1,-1,-1,-1,-1,7,1,-1,2,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,3,-1,-1,-1,7,-1,-1,-1,6,-1,-1,5,-1,-1,-1,-1,2,-1,-1,3,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,7,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1",
  "6,-1,-1,3,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,1,5,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1",
  "-1,4,7,-1,8,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,7,-1,-1,6,-1,-1,-1,-1,3,5,7,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,1,-1,-1,6,-1,-1,-1,-1,2,8,-1,-1,4,-1,-1,-1,-1,-1,9,-1,1,-1,-1,-1,4,-1,-1,-1,-1,-1,2,-1,6,9,-1",
  "-1,-1,-1,-1,-1,-1,8,-1,1,7,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,6,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,5,-1,-1,1,-1,-1,-1,-1,3,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,2,-1,-1,4,-1,-1,8,-1,-1,-1,-1,6,-1,-1,-1,3,-1,-1,-1,-1",
  "3,8,-1,6,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,3,-1,5,1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,3,-1,-1,1,-1,-1,6,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,1,7,-1,5,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,7,-1,3,2",
  "-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,6,9,7,-1,-1,-1,-1,-1,2,-1,-1,-1,4,8,-1,2,-1,-1,-1,2,5,-1,1,-1,-1,-1,3,-1,-1,8,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,7,-1,-1,1,3,-1,5,-1,-1,9,-1,-1,2,-1,-1,-1,3,1,-1,-1",
  "-1,2,-1,-1,-1,-1,-1,-1,-1,3,-1,5,-1,6,2,-1,-1,9,-1,6,8,-1,-1,-1,3,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,4,-1,8,-1,2,-1,-1,4,7,-1,-1,9,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,6,-1,-1,-1,1,7,-1,4,3,-1,-1,-1,-1",
  "-1,8,-1,-1,4,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,5,-1,-1,-1,4,-1,6,9,-1,-1,1,-1,-1,8,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,9,-1,-1,-1,-1,6,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1",
  "-1,-1,8,-1,9,-1,1,-1,-1,-1,6,-1,5,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,3,-1,1,-1,7,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,4,-1,-1,-1,3,-1,-1,-1,5,-1,-1,-1,-1,2,-1,-1,-1,7,-1,-1,-1,3,-1,8,-1,2,-1,-1,7,-1,-1,-1,-1,4",
  "4,-1,-1,-1,-1,-1,5,-1,8,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,5,-1,8,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,6,-1,3,-1,7,-1,5,-1,-1,2,-1,-1,-1,-1,-1,1,-1,8,-1,-1,-1,-1,-1,-1",
  "1,-1,-1,-1,-1,-1,3,-1,8,-1,6,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,3,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,5,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,6,-1,-1,-1,7,-1,-1,-1,-1,-1,8,-1,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1",
  "1,-1,-1,-1,-1,6,-1,8,-1,-1,6,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,7,-1,-1,-1,-1,9,-1,6,-1,-1,-1,7,-1,4,-1,-1,5,-1,-1,5,-1,-1,-1,7,-1,1,-1,-1,-1,5,-1,-1,-1,-1,3,2,-1,3,-1,-1,-1,-1,8,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1",
  "2,4,9,-1,6,-1,-1,-1,3,-1,3,-1,-1,-1,-1,2,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,1,-1,-1,4,-1,8,2,-1,-1,9,-1,5,-1,-1,7,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,1,-1,7,-1,-1,-1,3,-1,-1,-1",
  "-1,-1,-1,8,-1,-1,-1,-1,9,-1,8,7,3,-1,-1,-1,4,-1,6,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,8,5,-1,-1,9,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,3,-1,-1,7,5,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,3,-1,-1,-1,1,4,5,-1,4,-1,-1,-1,-1,2,-1,-1,1",
  "-1,-1,-1,5,-1,1,-1,-1,-1,-1,9,-1,-1,-1,-1,8,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,4,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,8,-1,-1,-1,-1,-1,1,-1,5,-1,-1,-1,2,-1,-1,4,-1,-1,-1,-1,-1,3,6,-1,-1,-1,-1",
  "-1,-1,-1,-1,-1,-1,8,-1,1,6,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,5,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,2,-1,-1,1,-1,-1,-1,-1,3,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,7,-1,-1,3,-1,-1,8,-1,-1,-1,-1,5,-1,-1,-1,4,-1,-1,-1,-1",
  "-1,4,7,6,-1,-1,-1,5,-1,8,-1,3,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,8,-1,5,-1,-1,6,-1,-1,-1,1,-1,-1,-1,-1,-1,6,-1,2,4,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,5,1,-1,-1,-1,6,-1,-1,-1,-1,4,-1,-1,9,-1,-1,-1,4,-1,-1,7",
  "-1,-1,-1,-1,-1,7,-1,9,5,-1,-1,-1,-1,-1,1,-1,-1,-1,8,6,-1,-1,2,-1,-1,-1,-1,-1,2,-1,-1,7,3,-1,-1,8,5,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,3,-1,-1,4,9,-1,-1,3,-1,5,-1,-1,-1,4,1,7,2,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1",
  "-1,4,-1,5,-1,-1,-1,-1,-1,8,-1,-1,-1,9,-1,-1,3,-1,-1,7,6,-1,2,-1,-1,-1,-1,-1,1,4,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,7,-1,-1,-1,-1,-1,3,6,-1,-1,-1,-1,1,-1,-1,4,-1,5,-1,-1,6,-1,-1,-1,-1,-1,-1,3,-1,-1,7,1,-1,-1,2,-1,-1",
  "-1,8,3,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,7,-1,-1,-1,3,-1,-1,-1,-1,-1,2,-1,6,-1,5,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1",
  "-1,-1,9,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,9,-1,-1,-1,7,-1,-1,-1,-1,-1,5,-1,6,-1,-1,6,5,-1,-1,4,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,2,8,-1,-1,-1,-1,-1,-1,3,-1,-1,7,5,-1,6,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,2,-1,3,-1,8",
  "-1,2,6,-1,3,9,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,1,9,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,9,-1,5,-1,-1,-1,-1,2,-1,-1,-1,-1,8,5,-1,-1,-1,-1,-1,3,-1,-1,2,-1,-1,9,-1,-1,4,-1,-1,-1,-1,7,6,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,4",
  "2,-1,3,-1,8,-1,-1,-1,-1,8,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,6,-1,5,-1,7,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,2,-1,5,-1,-1,-1,-1,6,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1",
  "6,-1,-1,3,-1,2,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,4,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,1,5,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1",
  "1,-1,-1,-1,-1,-1,9,-1,-1,-1,6,4,-1,-1,1,-1,7,-1,-1,7,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,3,-1,8,9,-1,-1,5,-1,-1,-1,-1,7,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,6,-1,7,-1,9,-1,-1,-1,-1,-1,4,-1,1,-1,-1,-1,-1,1,2,9,-1,3,-1",
  "-1,-1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,8,4,-1,6,2,3,-1,-1,-1,5,-1,-1,-1,-1,6,-1,-1,-1,4,5,3,-1,-1,-1,1,-1,-1,-1,6,-1,-1,-1,9,-1,-1,-1,7,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,4,-1,5,-1,-1,2,-1,-1,-1,-1,3,-1,8,-1,-1,-1,-1,9",
  "-1,2,-1,-1,-1,-1,5,9,3,8,-1,-1,5,-1,-1,4,6,-1,9,4,-1,-1,6,-1,-1,-1,8,-1,-1,2,-1,3,-1,-1,-1,-1,-1,6,-1,-1,8,-1,7,3,-1,7,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,3,8,-1,-1,7,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5",
  "9,-1,4,-1,-1,5,-1,-1,-1,2,5,-1,6,-1,-1,1,-1,-1,3,1,-1,-1,-1,-1,-1,-1,8,-1,7,-1,-1,-1,9,-1,-1,-1,4,-1,-1,2,6,-1,-1,-1,-1,-1,-1,1,4,7,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,3,-1,-1,8,-1,6,-1,4,-1,-1,-1,-1,-1,9,-1",
  "-1,-1,-1,5,2,-1,-1,-1,-1,-1,9,-1,-1,-1,3,-1,-1,4,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,1,-1,-1,-1,-1,-1,4,-1,-1,8,-1,-1,4,5,3,-1,-1,6,-1,-1,-1,1,-1,-1,-1,8,7,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,3,2,-1,4,-1,-1,8,-1,-1,1,-1",
  "5,3,-1,-1,2,-1,9,-1,-1,-1,2,4,-1,3,-1,-1,5,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,8,2,7,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,8,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,4,-1,-1,-1,-1,9,1,-1,2,-1,5,-1,4,3,-1",
  "1,-1,-1,-1,-1,7,8,6,-1,-1,-1,7,-1,-1,8,-1,1,-1,8,-1,-1,2,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,2,4,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,9,-1,-1,5,-1,-1,-1,6,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,9,-1,-1,-1,-1,-1,-1,-1,9,3,-1,4",
  "-1,-1,-1,-1,5,-1,-1,-1,1,1,-1,-1,-1,-1,-1,-1,7,-1,-1,6,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,9,-1,1,-1,3,-1,-1,-1,-1,-1,5,9,6,-1,2,-1,-1,8,-1,-1,6,2,-1,-1,7,-1,-1,7,-1,-1,-1,-1,-1,-1,3,-1,5,-1,7,-1,2,-1,-1",
  "-1,4,7,-1,2,-1,-1,-1,-1,8,-1,-1,-1,-1,1,-1,-1,-1,-1,3,-1,-1,-1,-1,9,-1,2,-1,-1,-1,-1,-1,5,-1,-1,-1,6,-1,-1,8,1,-1,-1,5,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,3,-1,4,-1,-1,-1,9,-1,-1,-1,1,-1,4,-1,-1,2,7,-1,8,-1,-1",
  "-1,-1,-1,-1,-1,-1,9,4,-1,-1,-1,-1,-1,9,-1,-1,-1,5,3,-1,-1,-1,-1,5,-1,7,-1,-1,8,-1,4,-1,-1,1,-1,-1,4,6,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,8,-1,8,-1,-1,7,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,2,8,-1,5,-1,2,6,-1,-1,-1,-1",
  "-1,2,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,4,1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,3,7,-1,-1,-1,-1,-1,6,-1,-1,4,1,2,-1,-1,-1,-1,1,-1,-1,7,4,-1,-1,5,-1,-1,8,-1,5,-1,-1,7,-1,-1,-1,-1,-1,-1,3,9,-1,-1",
  "1,-1,-1,-1,-1,-1,3,-1,8,-1,6,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,3,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,5,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,5,-1,-1,-1,6,-1,-1,-1,-1,-1,8,-1,2,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,-1",
  "2,-1,-1,-1,-1,1,-1,9,-1,-1,1,-1,-1,3,-1,7,-1,-1,9,-1,-1,8,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,8,5,-1,-1,6,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,3,-1,2,-1,3,-1,-1,-1,6,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,1,-1,9,-1,-1,-1,2,-1,5",
  "-1,-1,7,-1,-1,8,-1,-1,-1,-1,-1,6,-1,2,-1,3,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,9,-1,1,-1,-1,5,-1,-1,6,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,7,-1,9,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,8,3,-1,-1,4,-1,-1,-1,2,6,-1,-1,-1,-1,5,1,-1",
  "-1,-1,-1,3,6,-1,-1,-1,-1,8,5,-1,-1,-1,-1,-1,-1,-1,9,-1,4,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,6,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,7,-1,-1,9,-1,-1,4,5,-1,-1,-1,1,-1,5,-1,-1,-1,6,-1,4,-1,-1,-1,-1,9,-1,-1,2,-1,-1,-1,-1,-1,3,-1,-1,-1",
  "3,4,-1,6,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,8,-1,5,7,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,7,-1,-1,1,-1,-1,2,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,3,6,-1,2,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,7,-1,8,2",
  "-1,-1,-1,-1,-1,-1,4,-1,1,8,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,7,-1,-1,-1,-1,-1,-1,8,-1,-1,-1,6,-1,-1,4,-1,-1,-1,-1,3,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,2,-1,-1,5,-1,-1,1,-1,-1,-1,-1,7,-1,-1,-1,3,-1,-1,-1,-1",
  "-1,4,-1,-1,5,-1,-1,6,7,-1,-1,-1,1,-1,-1,-1,4,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,1,-1,-1,8,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,5,-1,3,-1,-1,-1,-1,-1,8,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1",
  "-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,2,-1,-1,4,-1,-1,1,-1,7,-1,-1,5,-1,-1,9,-1,-1,-1,3,-1,-1,7,-1,-1,-1,-1,4,-1,-1,6,-1,-1,-1,-1,6,-1,-1,1,-1,-1,8,-1,-1,-1,2,-1,-1,-1,-1,1,-1,-1,8,5,-1,9,-1,-1,-1,6,-1,-1,-1,-1,-1,8,-1,-1,-1,3",
  "8,-1,-1,7,-1,-1,-1,-1,4,-1,5,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,9,7,-1,-1,-1,8,-1,-1,-1,-1,4,3,-1,-1,5,-1,-1,-1,-1,2,-1,9,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,6,-1,-1,-1,7,-1,7,1,-1,-1,8,3,-1,2",
  "-1,8,-1,-1,-1,4,-1,5,-1,-1,-1,-1,7,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,8,5,-1,-1,-1,6,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,3,-1,2,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,1,7,-1,-1,-1,-1,-1,-1,-1,-1",
  "-1,-1,-1,-1,7,-1,-1,8,-1,-1,-1,6,-1,-1,-1,5,-1,-1,-1,2,-1,-1,-1,3,-1,6,1,-1,1,-1,-1,-1,7,-1,-1,2,-1,-1,8,-1,-1,5,3,4,-1,2,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,5,8,-1,-1,-1,6,-1,3,-1,4,-1,-1,-1,1,-1,-1,-1,-1",
  "-1,-1,-1,-1,-1,-1,8,-1,1,6,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,5,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,2,-1,-1,1,-1,-1,-1,-1,3,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,7,-1,-1,4,-1,-1,8,-1,-1,-1,-1,5,-1,-1,-1,3,-1,-1,-1,-1",
  "-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,3,-1,7,4,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,2,-1,8,-1,-1,4,-1,-1,1,-1,6,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,-1,7,8,-1,5,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1",
  "-1,5,2,-1,-1,6,8,-1,-1,-1,-1,-1,-1,-1,7,-1,2,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,4,8,-1,-1,9,-1,-1,2,-1,-1,4,1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,8,-1,-1,6,1,-1,-1,3,8,-1,-1,-1,-1,-1,9,-1,-1,-1,6,3,-1,-1,6,-1,-1,1,-1,9",
  "-1,-1,-1,-1,1,-1,7,8,-1,5,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,3,-1,7,4,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,2,-1,8,-1,-1,4,-1,-1,1,-1,6,-1,-1,5,-1,-1,-1,-1,-1",
  "1,-1,-1,-1,-1,-1,-1,-1,3,-1,6,-1,3,-1,-1,7,-1,-1,-1,7,-1,-1,-1,5,-1,-1,1,2,1,-1,7,-1,-1,-1,9,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,1,-1,-1,2,-1,-1,-1,-1,8,-1,6,4,-1,-1,-1,-1,9,-1,2,-1,-1,6,-1,-1,-1,-1,4,-1,-1,-1,-1,-1",
  "4,-1,-1,-1,7,-1,1,-1,-1,-1,-1,1,9,-1,4,6,-1,5,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,2,-1,-1,2,-1,3,-1,-1,-1,-1,8,4,7,-1,-1,6,-1,-1,-1,-1,1,4,-1,-1,-1,8,-1,6,-1,2,-1,-1,-1,-1,3,-1,-1,6,-1,-1,-1,9,-1,-1,-1,-1",
  "-1,-1,-1,-1,-1,-1,8,-1,1,7,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,6,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,5,-1,-1,1,-1,-1,-1,-1,3,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,-1,2,-1,-1,3,-1,-1,8,-1,-1,-1,-1,6,-1,-1,-1,4,-1,-1,-1,-1",
  "9,6,3,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,2,-1,5,-1,-1,-1,-1,4,-1,8,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,3,-1,-1,2,5,7,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,9,-1,2,-1,4,-1,7,-1,-1,-1,-1,-1,-1,9,-1,-1",
  "1,5,-1,3,-1,-1,-1,-1,-1,-1,7,-1,-1,4,-1,2,-1,-1,-1,-1,4,-1,7,2,-1,-1,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,-1,-1,1,-1,8,-1,1,-1,-1,8,-1,7,9,-1,-1,-1,-1,-1,-1,3,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,7,4,2,3",
  "-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,7,2,4,-1,-1,-1,9,8,-1,-1,-1,-1,9,4,7,-1,-1,-1,9,-1,-1,3,-1,-1,-1,5,-1,-1,9,-1,-1,1,2,-1,-1,-1,3,-1,1,-1,9,-1,-1,-1,6,-1,-1,-1,-1,2,5,-1,-1,-1,-1,5,6,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,6",
  "-1,-1,-1,-1,7,5,-1,-1,-1,-1,1,-1,-1,2,-1,-1,-1,-1,-1,4,-1,-1,-1,3,-1,-1,-1,5,-1,-1,-1,-1,-1,3,-1,2,-1,-1,-1,8,-1,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,1,-1,-1,4,8,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1",
  "6,-1,-1,-1,-1,-1,7,-1,3,-1,4,-1,8,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,5,-1,4,-1,8,-1,7,-1,-1,2,-1,-1,-1,-1,-1,1,-1,3,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,5,-1,-1,-1,-1,-1,7,-1,9,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,-1",
  "-1,-1,-1,-1,6,-1,-1,-1,4,-1,-1,6,-1,3,-1,-1,-1,-1,1,-1,-1,4,-1,-1,5,-1,7,7,-1,-1,-1,-1,-1,8,-1,5,-1,-1,-1,8,-1,-1,-1,-1,-1,6,-1,8,-1,-1,-1,-1,9,-1,-1,-1,2,-1,9,-1,-1,-1,-1,4,-1,-1,-1,-1,3,2,-1,-1,-1,-1,9,7,-1,-1,1,-1,-1",
  "-1,3,2,-1,-1,-1,-1,-1,5,8,-1,-1,3,-1,-1,-1,-1,-1,9,-1,4,2,8,-1,-1,-1,1,-1,-1,-1,4,-1,-1,-1,3,9,-1,-1,-1,6,-1,-1,-1,5,-1,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,2,-1,-1,-1,6,7,-1,8,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,9,5,-1,-1,-1,-1,6,-1",
  "-1,-1,-1,5,-1,3,-1,-1,-1,-1,-1,-1,-1,6,-1,7,-1,-1,5,-1,8,-1,-1,-1,-1,1,6,3,6,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,4,-1,1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,5,6,7,-1,-1,-1,-1,2,-1,8,-1,-1,4,-1,7,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,5,-1,-1",
  "-1,5,-1,3,-1,7,-1,4,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,-1,-1,-1,5,-1,8,-1,3,-1,6,1,-1,-1,-1,-1,8,-1,-1,5,-1,9,-1,6,-1,-1,1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,-1,-1,6,-1,-1,-1,6,9,2,7,-1,-1,-1,-1,2,-1,-1,-1,9,-1,-1",
  "-1,-1,5,-1,-1,8,-1,-1,1,8,-1,-1,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,7,8,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,6,4,-1,-1,-1,-1,9,-1,-1,-1,-1,-1,-1,5,3,-1,-1,2,-1,6,-1,-1,-1,-1,-1,-1,-1,-1,-1,1,3,8,-1,-1,5,-1,-1,-1,-1,9,-1,7,1,4,-1",
  "-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,2,-1,6,-1,1,-1,-1,-1,-1,5,1,-1,-1,-1,8,2,-1,8,-1,-1,-1,1,3,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,7,-1,9,-1,-1,1,-1,-1,-1,-1,-1,2,3,8,-1,-1,5,-1,4,-1,-1,9,-1,-1,-1,-1,-1,-1,-1,-1,-1,7,9,-1",
  "-1,-1,-1,6,5,8,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,-1,-1,1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,9,6,-1,7,-1,-1,-1,3,-1,-1,5,-1,-1,-1,-1,2,-1,8,-1,-1,-1,3,-1,-1,1,9,-1,-1,8,-1,-1,3,-1,6,-1,-1,-1,-1,-1,4,-1,-1,-1,-1,4,7,3,-1,-1",
  "-1,2,-1,3,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,8,-1,9,-1,8,3,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,2,-1,-1,-1,8,-1,7,-1,9,-1,-1,5,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,-1,4,-1,-1,-1,-1,-1,-1,-1,1,-1,-1,-1,1,-1,-1,-1,4,-1,2,2,-1,-1,7,-1,-1,8,-1,9",
  "-1,5,-1,-1,9,-1,-1,-1,-1,1,-1,-1,-1,-1,-1,6,-1,-1,-1,-1,-1,3,-1,8,-1,-1,-1,-1,-1,8,-1,4,-1,-1,-1,9,5,1,4,-1,-1,-1,-1,-1,-1,-1,3,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,4,-1,8,-1,-1,-1,6,-1,-1,7,7,-1,-1,1,5,-1,-1,6,-1",
  "-1,-1,-1,-1,-1,2,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,1,7,-1,-1,3,-1,-1,-1,9,-1,8,-1,-1,7,-1,-1,-1,-1,-1,-1,2,-1,8,9,-1,6,-1,-1,-1,1,3,-1,-1,6,-1,-1,-1,-1,9,-1,-1,5,-1,8,2,4,-1,-1,-1,-1,-1,8,9,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1",
  "3,-1,-1,-1,8,-1,-1,-1,-1,-1,-1,-1,7,-1,-1,-1,-1,5,1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,3,6,-1,-1,-1,2,-1,-1,4,-1,-1,-1,-1,7,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,6,-1,1,3,-1,-1,4,5,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,8,-1,-1"
]